'use strict';

import {switchTheme} from 'theme-loader';
import defaultTheme from 'default-theme';

function bindOnChange(propName, idx) {
  $(`[data-theme-idx="${idx}"] input[name="theme-${propName}"]`).on('keyup change paste', event => {
    if (!event.target.value) return;
    stored.themes[idx][propName] = event.target.value;
    window.changesMade = true;
    $(`[data-theme-idx="${idx}"] i.warning`).removeClass('hidden');
    // Live update current theme
    if (idx === stored.currentThemeIdx) switchTheme(stored.themes[idx]);
  });
}

function addThemeSettingsUI(theme, idx) {
  $('#themes-container').append(`
  <div class="theme-data hidden" data-theme-idx="${idx}">
    <h2>
      <input class="inherit-heading" name="theme-name" type="text" value="${theme.name}">
      <a class="postfix waves-effect" href="#!"><i class="material-icons text-primary">delete</i></a>
    </h2>
    <div class="switch">
      <span class="text-primary">Light Theme</span>
      <label>
        <input name="theme-is-dark" type="checkbox" ${theme.isDark ? 'checked' : ''}>
        <span class="lever"></span>
      </label>
      <span class="text-primary">Dark Theme</span>
    </div>
    <div class="input-field">
      <input name="theme-main" type="color" value="${theme.main}">
      <label for="theme-main" class="active">Main Color</label>
    </div>
    <div class="input-field">
      <input name="theme-background" type="color" value="${theme.background}">
      <label for="theme-background" class="active">Background Color</label>
    </div>
    <div class="input-field">
      <input name="theme-accent" type="color" value="${theme.accent}">
      <label for="theme-accent" class="active">Accent Color</label>
    </div>
  </div>
  `);
  $('#themes').append(`
    <li class="waves-effect">
      <a href="#!" data-theme-idx="${idx}">
        <span>
          <span class="theme-title">${theme.name}</span>
          <i class="hidden warning material-icons">warning</i>
        </span>
        <i class="action-select material-icons right scale-transition scale-out waves-effect">check</i>
      </a>
    </li>
  `);
  const anchor = $(`#themes [data-theme-idx="${idx}"]`);
  anchor.click(event => {
    $('#themes li.selection').removeClass('selection');
    anchor.parent().addClass('selection');
    $('#themes-container > .theme-data:not(.hidden)').addClass('hidden');
    div.removeClass('hidden');
  });
  const warning = anchor.find('i.warning');
  warning.tooltip({
    delay: 50,
    position: 'bottom',
    tooltip: 'Changes should be saved'
  });
  const div = $(`#themes-container > [data-theme-idx="${idx}"]`);
  ['name', 'main', 'background', 'accent'].forEach(propName => bindOnChange(propName, idx));
  div.find('[name="theme-is-dark"]').change(event => {
    stored.themes[idx].isDark = $(event.target).is(':checked');
    window.changesMade = true;
    anchor.find('i.warning').removeClass('hidden');
    if (idx === stored.currentThemeIdx) switchTheme(stored.themes[idx]);
  });
  div.find('input[name="theme-name"]').on('keyup change paste', event => {
    anchor.find('i.warning').removeClass('hidden');
    anchor.find('span.theme-title').text(event.target.value);
  });
  const selectThemeBtn = $(`#themes [data-theme-idx="${idx}"] i.action-select`);
  anchor.parent().hover(
    event => selectThemeBtn.addClass('scale-in'),
    event => selectThemeBtn.removeClass('scale-in')
  );
  selectThemeBtn.tooltip({
    delay: 50,
    tooltip: 'In Use',
    position: 'bottom'
  });
  const checkmarkTooltip = $(`#${selectThemeBtn[0].dataset.tooltipId}`);
  checkmarkTooltip.addClass('hidden');
  selectThemeBtn.click(event => {
    // Enabling the same theme multiple times does nothing
    if (stored.currentThemeIdx === idx) return;
    const checkmark = $('#themes i.force-scale-in');
    $(`#${checkmark[0].dataset.tooltipId}`).addClass('hidden');
    checkmarkTooltip.removeClass('hidden');
    checkmark.removeClass('force-scale-in');
    selectThemeBtn.addClass('force-scale-in');
    switchTheme(theme);
    stored.currentThemeIdx = idx;
    Materialize.toast($(`<span>Now using "${theme.name}"</span>`), SHORT_DURATION_MS);
    anchor.find('i.warning').removeClass('hidden');
    window.changesMade = true;
  });
  div.find('h2 > a').click(event => {
    if (stored.themes.length === 1) {
      Materialize.toast($('<span>Cannot delete last theme</span>'), SHORT_DURATION_MS);
      return;
    }
    stored.themes[idx].deleted = true;
    anchor.find('i.warning').removeClass('hidden');
    window.changesMade = true;
    div.addClass('hidden');
    anchor.parent().addClass('hidden');
    if (idx === stored.currentThemeIdx) {
      const nonDeletedTheme = stored.themes.findIndex(theme => !theme.deleted);
      $(`#themes [data-theme-idx="${nonDeletedTheme}"]`).click();
      $(`#themes [data-theme-idx="${nonDeletedTheme}"] > i.action-select`).click();
    } else {
      $(`#themes [data-theme-idx=${stored.currentThemeIdx}]`).click();
    }
  });
}

function newTheme(from = defaultTheme) {
  stored.themes.push(from);
  stored.themes[stored.themes.length - 1].name = 'New theme';
  window.changesMade = true;
  addThemeSettingsUI(stored.themes[stored.themes.length - 1], stored.themes.length - 1);
  const anchor = $(`#themes a[data-theme-idx="${stored.themes.length - 1}"]`);
  anchor.click();
  anchor.find('i.warning').removeClass('hidden');
}

function initialUISetup() {
  const currentThemeCheckmark = $(`a[data-theme-idx="${stored.currentThemeIdx}"] i.scale-transition`);
  currentThemeCheckmark.addClass('force-scale-in');
  currentThemeCheckmark.closest('li').addClass('selection');
  $(`#themes-container > div[data-theme-idx=${stored.currentThemeIdx}]`).removeClass('hidden');
  $(`#${currentThemeCheckmark[0].dataset.tooltipId}`).removeClass('hidden');
}

export {
  defaultTheme,
  addThemeSettingsUI,
  initialUISetup,
  newTheme
};
