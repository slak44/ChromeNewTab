'use strict';

const tinycolor = require('tinycolor2');
const defaultTheme = require('json-loader!default-theme');

function activateTheme(theme) {
  /* eslint-disable no-magic-numbers */
  const selectionColor = tinycolor(theme.accent).desaturate(25).lighten(5).toHex8String();
  const primaryTextColor = theme.isDark ? 'rgba(255, 255, 255, 0.75)' : 'rgba(0, 0, 0, 0.75)';
  const dividerColor = theme.isDark ? '#888888' : '#E0E0E0';
  const greyText = '#9E9E9E';
  const subheaderColor = theme.isDark ? 'rgba(255, 255, 255, 0.54)' : 'rgba(0, 0, 0, 0.54)';
  const collectionBackground = tinycolor(theme.background).brighten(5).toHex8String();
  const collectionHover = tinycolor(collectionBackground).brighten(5).toHex8String();
  const wavesColor = theme.isDark ? 'rgba(255, 255, 255, 0.45)' : 'rgba(0, 0, 0, 0.2)';
  /* eslint-enable no-magic-numbers */
  $('#dynamic-colors').text(`
    input:focus:not([type="color"]):not([readonly]), textarea.materialize-textarea:focus:not([readonly]) {
      border-bottom-color: ${theme.accent} !important;
      box-shadow: 0 1px 0 0 ${theme.accent} !important;
    }
    input:focus:not([readonly]) + label, textarea.materialize-textarea:focus:not([readonly]) + label {
      color: ${theme.accent} !important;
    }
    input[type="color"] {background-color: ${theme.background} !important;}
    input[type="checkbox"]:checked + label:before {
      border-bottom-color: ${theme.accent} !important;
      border-right-color: ${theme.accent} !important;
    }
    .grey-text: {color: ${greyText} !important;}
    .card-action a {color: ${theme.accent} !important;}
    .input-field i.prefix.active {color: ${theme.accent} !important;}
    nav {background-color: ${theme.main} !important;}
    .card, .dropdown-content, .side-nav, .modal, .modal-footer {background-color: ${collectionBackground} !important;}
    .side-nav li > a {color: ${primaryTextColor} !important;}
    .side-nav li > a.subheader {color: ${subheaderColor} !important;}
    .divider {background-color: ${dividerColor} !important;}
    .text-primary {color: ${primaryTextColor} !important;}
    html, i, h1, h2, h3, h4, h5, h6 {color: ${primaryTextColor} !important;}
    .waves-effect .waves-ripple {background-color: ${wavesColor} !important;}
    body {background-color: ${theme.background} !important;}
    .btn, .btn-large, .btn-flat {color: ${primaryTextColor} !important;}
    .btn, .btn-large {background-color: ${theme.accent} !important;}
    .btn:hover, .btn-large:hover {background-color: ${selectionColor} !important;}
    .btn-floating {background-color: ${theme.accent} !important;}
    .btn-floating i {color: ${primaryTextColor} !important;}
    .tabs li.indicator {background-color: ${theme.accent} !important;}
    .tabs li a {color: ${primaryTextColor} !important;}
    .tabs li a.active {color: ${theme.accent} !important;}
    .dropdown-content li:hover {background-color: ${collectionHover} !important;}
    .selection {background-color: ${selectionColor} !important;}
    .switch label input[type=checkbox]:checked + .lever {background-color: ${selectionColor} !important;}
    .switch label input[type=checkbox]:checked + .lever:after {background-color: ${theme.accent} !important;}
    input[type=checkbox]:not(:disabled) ~ .lever:active:before {background-color: ${tinycolor(theme.accent).toHexString()}26 !important;}
  `);
}

function bindOnChange(propName, idx) {
  $(`[data-theme-idx="${idx}"] input[name="theme-${propName}"]`).on('keyup change paste', event => {
    if (!event.target.value) return;
    themes[idx][propName] = event.target.value;
    window.changesMade = true;
    // Live update current theme
    if (idx === currentThemeIdx) activateTheme(themes[idx]);
  });
}

function addThemeSettingsUI(theme, idx) {
  $('#themes-container').append(`
  <div class="theme-data hidden" data-theme-idx="${idx}">
    <h2>
      <input class="inherit-heading" name="theme-name" type="text" value="${theme.name}">
      <a class="postfix waves-effect" href="#!"><i class="material-icons text-primary">delete</i></a>
    </h2>
    <div class="switch">
      <span class="text-primary">Light Theme</span>
      <label>
        <input name="theme-is-dark" type="checkbox" ${theme.isDark ? 'checked' : ''}>
        <span class="lever"></span>
      </label>
      <span class="text-primary">Dark Theme</span>
    </div>
    <div class="input-field">
      <input name="theme-main" type="color" value="${theme.main}">
      <label for="theme-main" class="active">Main Color</label>
    </div>
    <div class="input-field">
      <input name="theme-background" type="color" value="${theme.background}">
      <label for="theme-background" class="active">Background Color</label>
    </div>
    <div class="input-field">
      <input name="theme-accent" type="color" value="${theme.accent}">
      <label for="theme-accent" class="active">Accent Color</label>
    </div>
  </div>
  `);
  const div = $(`#themes-container > [data-theme-idx="${idx}"]`);
  ['name', 'main', 'background', 'accent'].forEach(propName => bindOnChange(propName, idx));
  div.find('[name="theme-is-dark"]').change(event => {
    themes[idx].isDark = $(event.target).is(':checked');
    window.changesMade = true;
    if (idx === currentThemeIdx) activateTheme(themes[idx]);
  });
  $('#themes').append(`
    <li class="waves-effect">
      <a href="#!" data-theme-idx="${idx}">
        <span>${theme.name}</span>
        <i class="material-icons right scale-transition scale-out waves-effect">check</i>
      </a>
    </li>
  `);
  const anchor = $(`#themes [data-theme-idx="${idx}"]`);
  anchor.click(event => {
    $('#themes li.selection').removeClass('selection');
    anchor.parent().addClass('selection');
    $('#themes-container > .theme-data:not(.hidden)').addClass('hidden');
    div.removeClass('hidden');
  });
  div.find('input[name="theme-name"]').on('keyup change paste', event => {
    anchor.find('span').text(event.target.value);
  });
  const selectThemeBtn = $(`#themes [data-theme-idx="${idx}"] i`);
  anchor.parent().hover(
    event => selectThemeBtn.addClass('scale-in'),
    event => selectThemeBtn.removeClass('scale-in')
  );
  selectThemeBtn.tooltip({
    delay: 50,
    tooltip: 'In Use',
    position: 'bottom'
  });
  const checkmarkTooltip = $(`#${selectThemeBtn[0].dataset.tooltipId}`);
  checkmarkTooltip.addClass('hidden');
  selectThemeBtn.click(event => {
    // Enabling the same theme multiple times does nothing
    if (currentThemeIdx === idx) return;
    const checkmark = $('#themes i.force-scale-in');
    $(`#${checkmark[0].dataset.tooltipId}`).addClass('hidden');
    checkmarkTooltip.removeClass('hidden');
    checkmark.removeClass('force-scale-in');
    selectThemeBtn.addClass('force-scale-in');
    activateTheme(theme);
    currentThemeIdx = idx;
    Materialize.toast($(`<span>Now using "${theme.name}"</span>`), SHORT_DURATION_MS);
    window.changesMade = true;
  });
  div.find('h2 > a').click(event => {
    if (themes.length === 1) {
      Materialize.toast($('<span>Cannot delete last theme</span>'), SHORT_DURATION_MS);
      return;
    }
    themes[idx].deleted = true;
    window.changesMade = true;
    div.addClass('hidden');
    anchor.parent().addClass('hidden');
    if (idx === currentThemeIdx) {
      const nonDeletedTheme = themes.findIndex(theme => !theme.deleted);
      $(`#themes [data-theme-idx="${nonDeletedTheme}"]`).click();
      $(`#themes [data-theme-idx="${nonDeletedTheme}"] > i`).click();
    } else {
      $(`#themes [data-theme-idx=${currentThemeIdx}]`).click();
    }
  });
}

function newTheme(from = defaultTheme) {
  themes.push(from);
  themes[themes.length - 1].name = 'New theme';
  window.changesMade = true;
  addThemeSettingsUI(themes[themes.length - 1], themes.length - 1);
  $(`#themes a[data-theme-idx="${themes.length - 1}"]`).click();
}

function initialUISetup() {
  const currentThemeCheckmark = $(`a[data-theme-idx="${currentThemeIdx}"] i.scale-transition`);
  currentThemeCheckmark.addClass('force-scale-in');
  currentThemeCheckmark.closest('li').addClass('selection');
  $(`#themes-container > div[data-theme-idx=${currentThemeIdx}]`).removeClass('hidden');
  $(`#${currentThemeCheckmark[0].dataset.tooltipId}`).removeClass('hidden');
}

module.exports = {
  defaultTheme,
  activateTheme,
  addThemeSettingsUI,
  initialUISetup,
  newTheme
};
