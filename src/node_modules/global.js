'use strict';

// Plugin dependencies get shoved in here
window.dependencies = {};

window.$ = window.jQuery = require('jquery');
window.Materialize = require('materialize-css');

window.SHORT_DURATION_MS = 3000; // 3 seconds
window.LONG_DURATION_MS = 10000; // 10 seconds

// The first argument of functions in this object MUST be the plugin object, as they will be bound to an actual plugin
window.pluginApi = {};
// Get the value of a setting by its name
pluginApi.setting = (plugin, setting) => {
  const obj = plugin.settings.filter(settingObj => settingObj.name === setting)[0];
  return obj.value ? obj.value : obj.default;
};
// Dynamically adds css
pluginApi.insertStyle = (plugin, css) => $('#plugin-css').append(css);
// Get a plugin's dependency
pluginApi.require = (plugin, depName) => window.dependencies[plugin.name][depName];

// Returns an object whose prototype is 'pluginApi' and whose functions' first argument is bound to the specified plugin
window.bindApi = pluginName => {
  const plugin = plugins.filter(plugin => pluginName === plugin.name)[0];
  const descriptors = {};
  Object.keys(pluginApi)
    .filter(key => pluginApi[key] instanceof Function)
    .forEach(key => descriptors[key] = {
      enumerable: true,
      value: pluginApi[key].bind(null, plugin)
    });
  return Object.create(pluginApi, descriptors);
};

// Handle running the HTML/CSS/JS content of a plugin for the given view
window.runViewContent = function (plugin, view) {
  try {
    if (plugin.html[view]) Object.keys(plugin.html[view]).forEach((selector, i, array) => {
      document.querySelector(selector).insertAdjacentHTML('beforeend', plugin.html[view][selector]);
    });
    if (plugin.css[view]) $('#plugin-css').append(plugin.css[view]);
    if (plugin.js[view]) eval(plugin.js[view]);
  } catch (err) {
    Materialize.toast($(`<span>Plugin ${plugin.name} encountered an error</span>`), SHORT_DURATION_MS);
    console.error(`Execution for ${plugin.name} failed in ${view}: `, err);
  }
};

// Show a toast with an undo button
window.undoToast = function (text, uid, performUndo) {
  const content = $(`<span>${text}</span>`)
    .add($(`<button id="undo-${uid}" class="btn-flat toast-action">Undo</button>`));
  Materialize.toast(content, LONG_DURATION_MS);
  const undoBtn = $(`#undo-${uid}`);
  undoBtn.click(event => {
    performUndo();
    undoBtn.parent()[0].M_Toast.remove();
  });
};
