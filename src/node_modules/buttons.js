'use strict';

import Action from 'actions';

function newSettingCard(kind) {
  $('ul.tabs').tabs('select_tab', 'buttons-tab');
  switch (kind) {
    case 'divider': buttons.push({kind, position: ''}); break;
    case 'subheader': buttons.push({kind, text: '', position: ''}); break;
    default: buttons.push({
      text: '',
      href: '',
      pictureType: 'image',
      imagePath: '',
      ligatureName: '',
      position: '',
      hotkey: '',
      openInNew: false
    });
  }
  window.changesMade = true;
  addSettingCard(buttons[buttons.length - 1], buttons.length - 1);
  $(`.card[data-button-idx="${buttons.length - 1}"] input.focus-location`).focus();
  Materialize.updateTextFields();
}

function addSettingCard(config, idx) {
  switch (config.kind) {
    case 'divider': return addDividerCard(config, idx);
    case 'subheader': return addSubheaderCard(config, idx);
    default: return addButtonCard(config, idx);
  }
}

function removeWithUndoListener(card, idx) {
  card.find('.remove-action').click(event => {
    buttons[idx].deleted = true;
    card.addClass('hidden');
    window.changesMade = true;
    undoToast('Deleted button', `button-${idx}`, () => {
      buttons[idx].deleted = false;
      card.removeClass('hidden');
    });
  });
}

// propKind can be text or number
function createBinderOnBlur(card, idx, propName, propKind = 'text') {
  card.find(`input[name="${propName}"]`).on('keyup change paste', event => {
    if (!event.target.value) return;
    if (propKind === 'number') buttons[idx][propName] = parseFloat(event.target.value);
    else buttons[idx][propName] = event.target.value;
    window.changesMade = true;
  });
}

function addDividerCard(config, idx) {
  $('#buttons-container').append(`
  <div class="card" data-button-idx="${idx}">
    <div class="card-content">
      <span class="card-title">Divider</span>
      <div class="input-field">
        <input class="focus-location" name="position" type="number" value="${config.position}">
        <label for="position" class="active">Position</label>
      </div>
    </div>
    <div class="card-action">
      <a href="#!" class="remove-action">Remove</a>
    </div>
  </div>
  `);
  const card = $(`.card[data-button-idx="${idx}"]`);
  removeWithUndoListener(card, idx);
  createBinderOnBlur(card, idx, 'position', 'number');
}

function addSubheaderCard(config, idx) {
  $('#buttons-container').append(`
  <div class="card" data-button-idx="${idx}">
    <div class="card-content">
      <span class="card-title">Subheader</span>
      <div class="input-field">
        <input class="focus-location" name="text" type="text" value="${config.text}">
        <label for="text" class="active">Text</label>
      </div>
      <div class="input-field">
        <input name="position" type="number" value="${config.position}">
        <label for="position" class="active">Position</label>
      </div>
    </div>
    <div class="card-action">
      <a href="#!" class="remove-action">Remove</a>
    </div>
  </div>
  `);
  const card = $(`.card[data-button-idx="${idx}"]`);
  removeWithUndoListener(card, idx);
  createBinderOnBlur(card, idx, 'position', 'number');
  createBinderOnBlur(card, idx, 'text');
}

function addButtonCard(config, idx) {
  const hasImg = config.imagePath && config.imagePath !== '' && config.pictureType === 'image';
  const hasIcon = config.ligatureName && config.ligatureName !== '' && config.pictureType === 'icon';
  $('#buttons-container').append(`
  <div class="card" data-button-idx="${idx}">
    <div class="card-content">
    <span class="card-title">Button</span>
      <div class="input-field">
        <input class="focus-location" name="text" type="text" value="${config.text}">
        <label for="text" class="active">Text</label>
      </div>
      <div class="input-field">
        <input name="href" type="url" value="${config.href}">
        <label for="href" class="active">Target URL</label>
        <select name="use-action" class="inline-select">
          <option value="" disabled selected>Use an action instead</option>
          ${Action.list.reduce((accum, action) => `
            ${accum}
            <option value="${action.uri}">${action.displayName}</option>
          `, '')}
        </select>
      </div>
      <div class="input-field ${config.pictureType === 'icon' ? '' : 'hidden'}">
        <input name="icon" type="text" value="${config.ligatureName}">
        <label for="icon" class="active">Material Icon Name</label>
        <div class="card-image">
          <div class="card-missing-image ${hasIcon ? 'hidden' : ''}">
            <i class="material-icons">cloud_off</i>
            <span>No Picture</span>
          </div>
          <i class="preview material-icons">${config.ligatureName}</i>
        </div>
      </div>
      <div class="input-field ${config.pictureType === 'image' ? '' : 'hidden'}">
        <input name="img" type="url" value="${config.imagePath}">
        <label for="img" class="active">Image URL</label>
        <div class="card-image">
          <div class="card-missing-image ${hasImg ? 'hidden' : ''}">
            <i class="material-icons">cloud_off</i>
            <span>No Picture</span>
          </div>
          <img src="${config.imagePath}">
        </div>
      </div>
      <div class="row">
        <div class="col input-field">
          <input name="position" type="number" value="${config.position}">
          <label for="position" class="active">Position</label>
        </div>
        <div class="col input-field">
          <input name="hotkey" class="capitalized" type="text" maxlength="1" value="${config.hotkey}">
          <label for="hotkey" class="active">Hotkey (alt+key)</label>
        </div>
      </div>
    </div>
    <div class="card-action">
      <a href="#!" class="remove-action">Remove</a>
      <div class="switch right no-margin">
        <span class="grey-text">Use Icons</span>
        <i class="material-icons grey-text help-tooltip">help</i>
        <label>
          <input name="use-icons" type="checkbox" ${config.pictureType === 'icon' ? 'checked' : ''}>
          <span class="lever"></span>
        </label>
      </div>
    </div>
  </div>
  `);
  const card = $(`.card[data-button-idx="${idx}"]`);
  removeWithUndoListener(card, idx);
  card.find('.help-tooltip').tooltip({
    position: 'top',
    delay: 50,
    html: true,
    tooltip: 'Use a material icon instead of an image'
  });
  ['text', 'href', 'hotkey'].forEach(propName => createBinderOnBlur(card, idx, propName));
  createBinderOnBlur(card, idx, 'position', 'number');
  const select = card.find('[name="use-action"]');
  select.material_select();
  const selectIcon = $('<i class="material-icons">more_horiz</i>');
  const selectTrigger = select.parent().find('input.select-dropdown');
  const selectList = select.parent().find('ul.select-dropdown');
  selectTrigger.after(selectIcon);
  selectIcon.click(() => selectTrigger.click());
  selectList.children().click(function () {
    const actionUrl = select.children()[$(this).index()].value;
    card.find('[name="href"]').val(actionUrl);
    buttons[idx].href = actionUrl;
    window.changesMade = true;
    card.click(); // Close the select
  });
  const image = card.find('img');
  const imageInput = card.find('input[name="img"]');
  const icon = card.find('i.preview');
  const iconInput = card.find('input[name="icon"]');
  const noImageDiv = card.find('.card-missing-image');
  card.find('input[name="use-icons"]').change(event => {
    imageInput.parent().toggleClass('hidden');
    iconInput.parent().toggleClass('hidden');
    const useIcons = $(event.target).is(':checked');
    const input = useIcons ? iconInput : imageInput;
    const otherInput = useIcons ? imageInput : iconInput;
    const target = useIcons ? icon : image;
    const other = useIcons ? image : icon;
    other.addClass('hidden');
    if (input.val()) {
      target.removeClass('hidden');
      noImageDiv.addClass('hidden');
    } else {
      target.addClass('hidden');
      noImageDiv.removeClass('hidden');
    }
    buttons[idx].pictureType = useIcons ? 'icon' : 'image';
    window.changesMade = true;
  });
  iconInput.on('keyup paste change', event => {
    buttons[idx].ligatureName = event.target.value;
    window.changesMade = true;
    icon.text(event.target.value);
    if (!event.target.value) {
      icon.addClass('hidden');
      noImageDiv.removeClass('hidden');
      return;
    }
    noImageDiv.addClass('hidden');
    icon.removeClass('hidden');
  });
  imageInput.on('keyup paste change', event => {
    buttons[idx].imagePath = event.target.value;
    window.changesMade = true;
    image.attr('src', event.target.value);
    if (!event.target.value) {
      image.addClass('hidden');
      noImageDiv.removeClass('hidden');
      return;
    }
    noImageDiv.addClass('hidden');
    image.removeClass('hidden');
  });
}

// Compare the button's kind
function compareKind(lhs, rhs) {
  const kindMap = {
    divider: 1,
    subheader: 10,
    'default': 100
  };
  if (kindMap[lhs] < kindMap[rhs]) return -1;
  else if (kindMap[lhs] === kindMap[rhs]) return 0;
  else return 1;
}

// Return a copy of the buttons array, but sorted
function sorted() {
  return [...buttons].map((button, idx) => {
    button.realIndex = idx;
    return button;
  }).sort((a, b) => {
    const [x, y] = [Number(a.position), Number(b.position)];
    if (x < y) return -1;
    else if (x > y) return 1;
    const kres = compareKind(a.kind, b.kind);
    if (kres !== 0) return kres;
    else return (a.text < b.text) ? -1 : 1;
  });
}

function insertButton(button, parent) {
  if (!(parent instanceof HTMLElement)) throw new Error('parent must be a HTMLElement');
  switch (button.kind) {
    case 'divider': parent.insertAdjacentHTML('beforeend', '<li class="divider"></li>'); return;
    case 'subheader': parent.insertAdjacentHTML('beforeend', `<li><a class="subheader">${button.text}</a></li>`); return;
    default: break;
  }
  let picture = '';
  switch (button.pictureType) {
    case 'image': if (button.imagePath) picture = `<img src="${button.imagePath}" class="button-image"/>`; break;
    case 'icon': if (button.ligatureName) picture = `<i class="material-icons">${button.ligatureName}</i>`; break;
    default: picture = '';
  }
  $(parent).append(`
  <li class="button waves-effect">
		<a href="${button.href || ''}">
      ${picture}
      <span class="button-content">${button.text}</span>
		</a>
	</li>`);
  if (!button.href) return;
  if (button.href.startsWith('chrome://')) {
    $(parent).children().last().click(event => {
      event.preventDefault();
      chrome.tabs.create({url: button.href});
      window.close();
    });
  } else if (button.href.startsWith('action://')) {
    $(parent).children().last().click(event => {
      event.preventDefault();
      Action.runURI(button.href);
    });
  }
}

export {
  newSettingCard,
  addSettingCard,
  sorted,
  insertButton
};
