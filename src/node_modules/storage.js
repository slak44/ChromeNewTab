'use strict';

/**
  This object handles all persistent data storage. Most data is stored in chrome.storage.local, because it can get
  quite large, but the *Cached functions use localStorage for performance reasons (and because we can afford to block
  cache fetches).
*/
window.storage = {};

// List of tracked objects
storage.elements = Object.freeze(['plugins', 'buttons', 'themes', 'currentThemeIdx']);
window.plugins = [];
window.buttons = [];
window.themes = [];
window.currentThemeIdx = 0;

// Checks whether or not an element is tracked
storage.isStored = element => storage.elements.includes(element);
// Load all elements and update global objects
storage.loadAll = callback => {
  chrome.storage.local.get({
    // These are defaults:
    plugins: [],
    buttons: [
      {kind: 'subheader', text: 'Check out the settings!', position: 0},
      {text: 'Settings', pictureType: 'icon', ligatureName: 'settings', kind: 'default',
        href: '/settings.html', position: 1, hotkey: '', imagePath: ''}
    ],
    currentThemeIdx: 0,
    themes: [require('json-loader!default-theme')]
  }, items => {
    storage.elements.forEach(item => window[item] = items[item]);
    callback();
  });
};
// Persist all tracked global objects into storage
storage.storeAll = callback => {
  const toStore = {};
  storage.elements.forEach(e => toStore[e] = window[e]);
  chrome.storage.local.set(toStore, callback);
};
// Persist a particular global object into storage
storage.store = (element, callback) => {
  if (!storage.isStored(element)) throw Error(`Element not tracked: ${element}`);
  const objToStore = {};
  objToStore[element] = window[element];
  chrome.storage.local.set(objToStore, callback);
};
// Deletes storage for an element, and removes the associated global object
storage.clear = (element, callback) => {
  if (!storage.isStored(element)) throw Error(`Element not tracked: ${element}`);
  delete window[element];
  const objToStore = {};
  objToStore[element] = {};
  chrome.storage.local.set(objToStore, callback);
};
// Delete all global objects and clear persistent storage
storage.clearAll = () => {
  storage.elements.forEach(element => delete window[element]);
  chrome.storage.local.clear();
};

// List of cacheable things
storage.cacheable = Object.freeze({
  precompiledStyles: 'precompiledStylesKey'
});
// Checks whether or not a string is a valid cacheKey
storage.isCached = key => Object.values(storage.cacheable).includes(key);
// Load cached data from localStorage, and returns true if they were exist and were loaded, false otherwise
storage.loadCached = (key, loadCallback) => {
  if (!storage.isCached(key)) throw Error(`Cache key does not exist: ${key}`);
  const item = localStorage.getItem(key);
  if (item === null) return false;
  loadCallback(item);
  return true;
};
// Store elements in localStorage
storage.storeCached = (key, item) => {
  if (!storage.isCached(key)) throw Error(`Cache key does not exist: ${key}`);
  localStorage.setItem(key, item);
};
// Delete cached value of item
storage.clearCached = key => {
  if (!storage.isCached(key)) throw Error(`Cache key does not exist: ${key}`);
  localStorage.clear(key);
};
// Clear all cached data
storage.clearAllCached = () => storage.cacheable.values().forEach(cacheKey => storage.clearCached(cacheKey));
