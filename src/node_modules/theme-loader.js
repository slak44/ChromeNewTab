'use strict';

import 'storage';
import tinycolor from 'tinycolor2';

function generateDynamicStyles(theme) {
  const selectionColor = tinycolor(theme.accent).desaturate(25).lighten(5).toHex8String();
  const primaryTextColor = theme.isDark ? 'rgba(255, 255, 255, 0.75)' : 'rgba(0, 0, 0, 0.75)';
  const dividerColor = theme.isDark ? '#888888' : '#E0E0E0';
  const greyText = '#9E9E9E';
  const subheaderColor = theme.isDark ? 'rgba(255, 255, 255, 0.54)' : 'rgba(0, 0, 0, 0.54)';
  const collectionBackground = tinycolor(theme.background).brighten(5).toHex8String();
  const collectionHover = tinycolor(collectionBackground).brighten(5).toHex8String();
  const wavesColor = theme.isDark ? 'rgba(255, 255, 255, 0.45)' : 'rgba(0, 0, 0, 0.2)';
  return `
    :root {
      --divider: ${dividerColor};
      --collection-background: ${collectionBackground};
    }
  
    input:focus:not([type="color"]):not([readonly]), textarea.materialize-textarea:focus:not([readonly]) {
      border-bottom-color: ${theme.accent} !important;
      box-shadow: 0 1px 0 0 ${theme.accent} !important;
    }
    input:focus:not([readonly]) + label, textarea.materialize-textarea:focus:not([readonly]) + label {
      color: ${theme.accent} !important;
    }
    input[type="color"] {background-color: ${theme.background} !important;}
    input[type="checkbox"]:checked + label:before {
      border-bottom-color: ${theme.accent} !important;
      border-right-color: ${theme.accent} !important;
    }
    .grey-text: {color: ${greyText} !important;}
    .card-action a {color: ${theme.accent} !important;}
    .input-field i.prefix.active {color: ${theme.accent} !important;}
    nav {background-color: ${theme.main} !important;}
    .card, .dropdown-content, .side-nav, .modal, .modal-footer {background-color: ${collectionBackground} !important;}
    .side-nav li > a {color: ${primaryTextColor} !important;}
    .side-nav li > a.subheader {color: ${subheaderColor} !important;}
    .divider {background-color: ${dividerColor} !important;}
    .text-primary {color: ${primaryTextColor} !important;}
    html, i, h1, h2, h3, h4, h5, h6 {color: ${primaryTextColor} !important;}
    .waves-effect .waves-ripple {background-color: ${wavesColor} !important;}
    html, body, .activity {background-color: ${theme.background} !important;}
    .btn, .btn-large, .btn-flat {color: ${primaryTextColor} !important;}
    .btn, .btn-large {background-color: ${theme.accent} !important;}
    .btn:hover, .btn-large:hover {background-color: ${selectionColor} !important;}
    .btn-floating {background-color: ${theme.accent} !important;}
    .btn-floating i {color: ${primaryTextColor} !important;}
    .tabs li.indicator {background-color: ${theme.accent} !important;}
    .tabs li a {color: ${primaryTextColor} !important;}
    .tabs li a.active {color: ${theme.accent} !important;}
    .dropdown-content li:hover {background-color: ${collectionHover} !important;}
    .selection {background-color: ${selectionColor} !important;}
    .switch label input[type=checkbox]:checked + .lever {background-color: ${selectionColor} !important;}
    .switch label input[type=checkbox]:checked + .lever:after {background-color: ${theme.accent} !important;}
    input[type=checkbox]:not(:disabled) ~ .lever:active:before {background-color: ${tinycolor(theme.accent).toHexString()}26 !important;}
    ul.select-dropdown > li:first-child > span {color: ${greyText} !important;}
    ul.select-dropdown > li:first-child:hover {background-color: transparent !important;}
    ul.select-dropdown > li > span {color: ${theme.accent} !important;}
    .tap-target {background-color: ${theme.accent} !important;}
  `;
}

function switchTheme(theme, cacheStyles) {
  const compiledText = generateDynamicStyles(theme);
  document.getElementById('dynamic-colors').innerText = compiledText;
  if (cacheStyles) storage.storeCached(storage.cacheable.precompiledStyles, compiledText);
}

export {
  switchTheme
};
